/* automatically generated by rust-bindgen 0.59.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const PR_NONE: u32 = 0;
pub const PR_NORMAL: u32 = 1;
pub const PR_FAST: u32 = 2;
pub const E_SLOW: u32 = 0;
pub const E_NORMAL: u32 = 1;
pub const E_FAST: u32 = 2;
pub const E_FASTEST: u32 = 3;
pub const P_PATH1: u32 = 0;
pub const P_PATH2: u32 = 1;
pub const P_PATH3: u32 = 2;
pub const SP_OFF: u32 = 0;
pub const SP_AUTO: i32 = -1;
pub const SP_USER: i32 = -2;
pub const SP_BKGRND: u32 = 0;
pub const SP_LAST: i32 = -1;
pub const SP_ALL: i32 = -2;
pub const CR_QUALITY: u32 = 0;
pub const CR_CLOSEST: u32 = 1;
pub const CR_FLOOR: u32 = 2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WiBox {
    pub Left: ::std::os::raw::c_int,
    pub Top: ::std::os::raw::c_int,
    pub Right: ::std::os::raw::c_int,
    pub Bottom: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WiBox() {
    assert_eq!(
        ::std::mem::size_of::<WiBox>(),
        16usize,
        concat!("Size of: ", stringify!(WiBox))
    );
    assert_eq!(
        ::std::mem::align_of::<WiBox>(),
        4usize,
        concat!("Alignment of ", stringify!(WiBox))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiBox>())).Left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WiBox),
            "::",
            stringify!(Left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiBox>())).Top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WiBox),
            "::",
            stringify!(Top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiBox>())).Right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WiBox),
            "::",
            stringify!(Right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiBox>())).Bottom as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WiBox),
            "::",
            stringify!(Bottom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WiImageBlock {
    pub Page: ::std::os::raw::c_int,
    pub PageLeft: ::std::os::raw::c_int,
    pub PageTop: ::std::os::raw::c_int,
    pub PageWidth: ::std::os::raw::c_int,
    pub PageHeight: ::std::os::raw::c_int,
    pub Block: ::std::os::raw::c_int,
    pub BlockLeft: ::std::os::raw::c_int,
    pub BlockTop: ::std::os::raw::c_int,
    pub BlockWidth: ::std::os::raw::c_int,
    pub BlockHeight: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WiImageBlock() {
    assert_eq!(
        ::std::mem::size_of::<WiImageBlock>(),
        40usize,
        concat!("Size of: ", stringify!(WiImageBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<WiImageBlock>(),
        4usize,
        concat!("Alignment of ", stringify!(WiImageBlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiImageBlock>())).Page as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WiImageBlock),
            "::",
            stringify!(Page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiImageBlock>())).PageLeft as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WiImageBlock),
            "::",
            stringify!(PageLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiImageBlock>())).PageTop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WiImageBlock),
            "::",
            stringify!(PageTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiImageBlock>())).PageWidth as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WiImageBlock),
            "::",
            stringify!(PageWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiImageBlock>())).PageHeight as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WiImageBlock),
            "::",
            stringify!(PageHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiImageBlock>())).Block as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WiImageBlock),
            "::",
            stringify!(Block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiImageBlock>())).BlockLeft as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WiImageBlock),
            "::",
            stringify!(BlockLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiImageBlock>())).BlockTop as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WiImageBlock),
            "::",
            stringify!(BlockTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiImageBlock>())).BlockWidth as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WiImageBlock),
            "::",
            stringify!(BlockWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiImageBlock>())).BlockHeight as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WiImageBlock),
            "::",
            stringify!(BlockHeight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WiRawImage {
    pub Raw: *mut ::std::os::raw::c_uchar,
    pub Height: ::std::os::raw::c_int,
    pub Width: ::std::os::raw::c_int,
    pub BitsPerPixel: ::std::os::raw::c_int,
    pub Color: ::std::os::raw::c_int,
    pub LevelHeight: ::std::os::raw::c_int,
    pub LevelWidth: ::std::os::raw::c_int,
    pub AppData: *mut ::std::os::raw::c_void,
    pub Comment: *mut ::std::os::raw::c_uchar,
    pub CommentLength: ::std::os::raw::c_int,
    pub AppExtension: *mut ::std::os::raw::c_uchar,
    pub AppExtensionLength: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WiRawImage() {
    assert_eq!(
        ::std::mem::size_of::<WiRawImage>(),
        72usize,
        concat!("Size of: ", stringify!(WiRawImage))
    );
    assert_eq!(
        ::std::mem::align_of::<WiRawImage>(),
        8usize,
        concat!("Alignment of ", stringify!(WiRawImage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).Raw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(Raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).Height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).Width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).BitsPerPixel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(BitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).Color as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(Color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).LevelHeight as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(LevelHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).LevelWidth as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(LevelWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).AppData as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(AppData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).Comment as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(Comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).CommentLength as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(CommentLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).AppExtension as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(AppExtension)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiRawImage>())).AppExtensionLength as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WiRawImage),
            "::",
            stringify!(AppExtensionLength)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WiCmpImage {
    pub CmpData: *mut ::std::os::raw::c_uchar,
    pub Size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WiCmpImage() {
    assert_eq!(
        ::std::mem::size_of::<WiCmpImage>(),
        16usize,
        concat!("Size of: ", stringify!(WiCmpImage))
    );
    assert_eq!(
        ::std::mem::align_of::<WiCmpImage>(),
        8usize,
        concat!("Alignment of ", stringify!(WiCmpImage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpImage>())).CmpData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpImage),
            "::",
            stringify!(CmpData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpImage>())).Size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpImage),
            "::",
            stringify!(Size)
        )
    );
}
pub type ByteIOFunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type ScanlineIOFunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut WiImageBlock,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int,
>;
pub type ExtensionIOFunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_uchar,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WiCmpOptions {
    pub Quality: f32,
    pub CmpRatio: f32,
    pub CmpControl: ::std::os::raw::c_int,
    pub Encoder: ::std::os::raw::c_int,
    pub EncodePath: ::std::os::raw::c_int,
    pub Progressive: ::std::os::raw::c_int,
    pub WriteNextByte: ByteIOFunc,
    pub WriteParam: *mut ::std::os::raw::c_void,
    pub Magnification: ::std::os::raw::c_int,
    pub EdgeEnhancement: ::std::os::raw::c_int,
    pub ContrastEnhancement: ::std::os::raw::c_int,
    pub FocusWeight: ::std::os::raw::c_int,
    pub FocusBoxes: *mut WiBox,
    pub nBoxes: ::std::os::raw::c_int,
    pub HighColorQuality: ::std::os::raw::c_int,
    pub ReadScanline: ScanlineIOFunc,
    pub ReadScanlineParam: *mut ::std::os::raw::c_void,
    pub BlockSize: ::std::os::raw::c_int,
    pub Blocks: *mut WiBox,
    pub nBlocks: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WiCmpOptions() {
    assert_eq!(
        ::std::mem::size_of::<WiCmpOptions>(),
        112usize,
        concat!("Size of: ", stringify!(WiCmpOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<WiCmpOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(WiCmpOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).Quality as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(Quality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).CmpRatio as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(CmpRatio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).CmpControl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(CmpControl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).Encoder as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(Encoder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).EncodePath as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(EncodePath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).Progressive as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(Progressive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).WriteNextByte as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(WriteNextByte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).WriteParam as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(WriteParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).Magnification as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(Magnification)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).EdgeEnhancement as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(EdgeEnhancement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WiCmpOptions>())).ContrastEnhancement as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(ContrastEnhancement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).FocusWeight as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(FocusWeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).FocusBoxes as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(FocusBoxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).nBoxes as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(nBoxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).HighColorQuality as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(HighColorQuality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).ReadScanline as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(ReadScanline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).ReadScanlineParam as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(ReadScanlineParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).BlockSize as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(BlockSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).Blocks as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(Blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiCmpOptions>())).nBlocks as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WiCmpOptions),
            "::",
            stringify!(nBlocks)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WiDecmpOptions {
    pub Smoothing: ::std::os::raw::c_int,
    pub Fast: ::std::os::raw::c_int,
    pub ReadNextByte: ByteIOFunc,
    pub ReadParam: *mut ::std::os::raw::c_void,
    pub Sharpening: ::std::os::raw::c_int,
    pub WriteScanline: ScanlineIOFunc,
    pub WriteScanlineParam: *mut ::std::os::raw::c_void,
    pub SubImage: WiImageBlock,
    pub Magnification: ::std::os::raw::c_int,
    pub WriteAppExtension: ExtensionIOFunc,
    pub WriteAppExtensionParam: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_WiDecmpOptions() {
    assert_eq!(
        ::std::mem::size_of::<WiDecmpOptions>(),
        112usize,
        concat!("Size of: ", stringify!(WiDecmpOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<WiDecmpOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(WiDecmpOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiDecmpOptions>())).Smoothing as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WiDecmpOptions),
            "::",
            stringify!(Smoothing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiDecmpOptions>())).Fast as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WiDecmpOptions),
            "::",
            stringify!(Fast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiDecmpOptions>())).ReadNextByte as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WiDecmpOptions),
            "::",
            stringify!(ReadNextByte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiDecmpOptions>())).ReadParam as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WiDecmpOptions),
            "::",
            stringify!(ReadParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiDecmpOptions>())).Sharpening as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WiDecmpOptions),
            "::",
            stringify!(Sharpening)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiDecmpOptions>())).WriteScanline as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WiDecmpOptions),
            "::",
            stringify!(WriteScanline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WiDecmpOptions>())).WriteScanlineParam as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WiDecmpOptions),
            "::",
            stringify!(WriteScanlineParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiDecmpOptions>())).SubImage as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WiDecmpOptions),
            "::",
            stringify!(SubImage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WiDecmpOptions>())).Magnification as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WiDecmpOptions),
            "::",
            stringify!(Magnification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WiDecmpOptions>())).WriteAppExtension as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WiDecmpOptions),
            "::",
            stringify!(WriteAppExtension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WiDecmpOptions>())).WriteAppExtensionParam as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WiDecmpOptions),
            "::",
            stringify!(WriteAppExtensionParam)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SiBox {
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SiBox() {
    assert_eq!(
        ::std::mem::size_of::<SiBox>(),
        16usize,
        concat!("Size of: ", stringify!(SiBox))
    );
    assert_eq!(
        ::std::mem::align_of::<SiBox>(),
        4usize,
        concat!("Alignment of ", stringify!(SiBox))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiBox>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SiBox),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiBox>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SiBox),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiBox>())).right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SiBox),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiBox>())).bottom as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SiBox),
            "::",
            stringify!(bottom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SiImageInfo {
    pub Raw: *mut ::std::os::raw::c_uchar,
    pub Height: ::std::os::raw::c_int,
    pub Width: ::std::os::raw::c_int,
    pub BitsPerPixel: ::std::os::raw::c_int,
    pub color: ::std::os::raw::c_int,
    pub LevelHeight: ::std::os::raw::c_int,
    pub LevelWidth: ::std::os::raw::c_int,
    pub AppData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SiImageInfo() {
    assert_eq!(
        ::std::mem::size_of::<SiImageInfo>(),
        40usize,
        concat!("Size of: ", stringify!(SiImageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SiImageInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SiImageInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiImageInfo>())).Raw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SiImageInfo),
            "::",
            stringify!(Raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiImageInfo>())).Height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SiImageInfo),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiImageInfo>())).Width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SiImageInfo),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiImageInfo>())).BitsPerPixel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SiImageInfo),
            "::",
            stringify!(BitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiImageInfo>())).color as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SiImageInfo),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiImageInfo>())).LevelHeight as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SiImageInfo),
            "::",
            stringify!(LevelHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiImageInfo>())).LevelWidth as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SiImageInfo),
            "::",
            stringify!(LevelWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiImageInfo>())).AppData as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SiImageInfo),
            "::",
            stringify!(AppData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SiCmpDataInfo {
    pub CmpData: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SiCmpDataInfo() {
    assert_eq!(
        ::std::mem::size_of::<SiCmpDataInfo>(),
        16usize,
        concat!("Size of: ", stringify!(SiCmpDataInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SiCmpDataInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SiCmpDataInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpDataInfo>())).CmpData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpDataInfo),
            "::",
            stringify!(CmpData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpDataInfo>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpDataInfo),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SiCmpOption {
    pub Quality: f32,
    pub CmpRatio: f32,
    pub AutoRatio: ::std::os::raw::c_int,
    pub Encoder: ::std::os::raw::c_int,
    pub EncodePath: ::std::os::raw::c_int,
    pub Progressive: ::std::os::raw::c_int,
    pub WriteNextByte: ByteIOFunc,
    pub WriteParam: *mut ::std::os::raw::c_void,
    pub Magnification: ::std::os::raw::c_int,
    pub EdgeEnhancement: ::std::os::raw::c_int,
    pub ContrastEnhancement: ::std::os::raw::c_int,
    pub FocusWeight: ::std::os::raw::c_int,
    pub FocusBoxes: *mut SiBox,
    pub nBoxes: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SiCmpOption() {
    assert_eq!(
        ::std::mem::size_of::<SiCmpOption>(),
        72usize,
        concat!("Size of: ", stringify!(SiCmpOption))
    );
    assert_eq!(
        ::std::mem::align_of::<SiCmpOption>(),
        8usize,
        concat!("Alignment of ", stringify!(SiCmpOption))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).Quality as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(Quality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).CmpRatio as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(CmpRatio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).AutoRatio as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(AutoRatio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).Encoder as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(Encoder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).EncodePath as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(EncodePath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).Progressive as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(Progressive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).WriteNextByte as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(WriteNextByte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).WriteParam as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(WriteParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).Magnification as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(Magnification)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).EdgeEnhancement as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(EdgeEnhancement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).ContrastEnhancement as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(ContrastEnhancement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).FocusWeight as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(FocusWeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).FocusBoxes as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(FocusBoxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiCmpOption>())).nBoxes as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SiCmpOption),
            "::",
            stringify!(nBoxes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SiDecmpOption {
    pub Smoothing: ::std::os::raw::c_int,
    pub Fast: ::std::os::raw::c_int,
    pub ReadNextByte: ByteIOFunc,
    pub ReadParam: *mut ::std::os::raw::c_void,
    pub Sharpening: ::std::os::raw::c_int,
    pub WriteScanline: ScanlineIOFunc,
    pub WriteScanlineParam: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SiDecmpOption() {
    assert_eq!(
        ::std::mem::size_of::<SiDecmpOption>(),
        48usize,
        concat!("Size of: ", stringify!(SiDecmpOption))
    );
    assert_eq!(
        ::std::mem::align_of::<SiDecmpOption>(),
        8usize,
        concat!("Alignment of ", stringify!(SiDecmpOption))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiDecmpOption>())).Smoothing as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SiDecmpOption),
            "::",
            stringify!(Smoothing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiDecmpOption>())).Fast as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SiDecmpOption),
            "::",
            stringify!(Fast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiDecmpOption>())).ReadNextByte as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SiDecmpOption),
            "::",
            stringify!(ReadNextByte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiDecmpOption>())).ReadParam as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SiDecmpOption),
            "::",
            stringify!(ReadParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiDecmpOption>())).Sharpening as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SiDecmpOption),
            "::",
            stringify!(Sharpening)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SiDecmpOption>())).WriteScanline as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SiDecmpOption),
            "::",
            stringify!(WriteScanline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SiDecmpOption>())).WriteScanlineParam as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SiDecmpOption),
            "::",
            stringify!(WriteScanlineParam)
        )
    );
}
extern "C" {
    pub fn WiCreateRawImage() -> *mut WiRawImage;
}
extern "C" {
    pub fn WiCreateCmpImage() -> *mut WiCmpImage;
}
extern "C" {
    pub fn WiCreateCmpOptions() -> *mut WiCmpOptions;
}
extern "C" {
    pub fn WiCreateDecmpOptions() -> *mut WiDecmpOptions;
}
extern "C" {
    pub fn WiDestroyRawImage(RawImage: *mut WiRawImage);
}
extern "C" {
    pub fn WiDestroyCmpImage(CmpImage: *mut WiCmpImage);
}
extern "C" {
    pub fn WiDestroyCmpOptions(CmpOptions: *mut WiCmpOptions);
}
extern "C" {
    pub fn WiDestroyDecmpOptions(DecompOptions: *mut WiDecmpOptions);
}
extern "C" {
    pub fn WiCompress(
        CmpOptions: *mut WiCmpOptions,
        RawImage: *mut WiRawImage,
        CmpImage: *mut WiCmpImage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WiDecompress(
        DecmpOptions: *mut WiDecmpOptions,
        RawImage: *mut WiRawImage,
        CmpImage: *mut WiCmpImage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WiBeginDecompress(
        DecmpOptions: *mut WiDecmpOptions,
        RawImage: *mut WiRawImage,
        CmpImage: *mut WiCmpImage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WiEndDecompress(
        DecmpOptions: *mut WiDecmpOptions,
        RawImage: *mut WiRawImage,
        CmpImage: *mut WiCmpImage,
    );
}
extern "C" {
    pub fn WiDecompressSubHeader(
        DecmpOptions: *mut WiDecmpOptions,
        RawImage: *mut WiRawImage,
        CmpImage: *mut WiCmpImage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WiDecompressSubImage(
        DecmpOptions: *mut WiDecmpOptions,
        RawImage: *mut WiRawImage,
        CmpImage: *mut WiCmpImage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WiGetProgressiveImage(RawImage: *mut WiRawImage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WiFreeRawImageData(RawImage: *mut WiRawImage);
}
extern "C" {
    pub fn WiFreeCmpImageData(CmpImage: *mut WiCmpImage);
}
extern "C" {
    pub fn WiInsertCmpImage(
        BlockIndex: *mut WiImageBlock,
        SrcCmpImage: *mut WiCmpImage,
        InsCmpImage: *mut WiCmpImage,
        DesCmpImage: *mut WiCmpImage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SiCompress(
        RawImage: *mut SiImageInfo,
        CmpOptions: *mut SiCmpOption,
        CmpImage: *mut SiCmpDataInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SiDecompress(
        CmpImage: *mut SiCmpDataInfo,
        DecmpOptions: *mut SiDecmpOption,
        RawImage: *mut SiImageInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SiGetImageInfo(ImageInfo: *mut SiImageInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SiFreeImageInfo(ImageInfo: *mut SiImageInfo);
}
extern "C" {
    pub fn SiFreeCmpDataInfo(CmpDataInfo: *mut SiCmpDataInfo);
}
extern "C" {
    pub fn InitLibrary();
}
extern "C" {
    pub fn CreateStructures() -> *mut WiCmpImage;
}
extern "C" {
    pub fn Decompress(cmpimage: *mut WiCmpImage) -> *mut WiRawImage;
}
extern "C" {
    pub fn Cleanup();
}
